
scrivere procedure per aggiornare matrici in caso di aggiunta di nuove
coincidenze e/o temporal group

scrivere test data, facendo muovere pattern in varie direzioni

e unit test per output node

adattare algoritmi per salvare rete in yaml all'output node
probabilmente serve qualcosa del tipo

make_yaml (node) -> if, elif, elif

don't like having a node's state split across several classes

usare yaml per definire la rete // done

network.feed (input) ->
  

class Network :
   layer = {'first': [],
            ...}

   def feed (uInput, time = time.now ()) ## by default, pass system time
   
 
class Node :

   receptive field size -> range

   def feed (uInput) uInput is already a vector

   def add_connection 

   def send_messages   

how to build the network:

network ['layer0'] = [node1 = Node (), node2 = Node (), node3 = Node ()...]
network ['node1'].connect (Node2)




prevedere un metodo clone per l'intera rete
prevedere un metodo per fare il merge di due reti
  
implementare test semaforo
scrivere della documentazione come si deve